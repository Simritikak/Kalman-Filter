pip install opencv-python numpy
import cv2
import numpy as np

# Load the sample video
cap = cv2.VideoCapture('sample_video.mp4')

# Create a Kalman Filter with 4 states and 2 measurements
kalman = cv2.KalmanFilter(4, 2)

# Define the matrices
kalman.measurementMatrix = np.array([[1, 0, 0, 0], [0, 1, 0, 0]], np.float32)
kalman.transitionMatrix  = np.array([[1, 0, 1, 0], 
                                     [0, 1, 0, 1], 
                                     [0, 0, 1, 0], 
                                     [0, 0, 0, 1]], np.float32)
kalman.processNoiseCov = np.eye(4, dtype=np.float32) * 0.03

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Convert to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Simple thresholding to detect bright object
    _, thresh = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY)

    # Find contours to locate object
    contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    if contours:
        c = max(contours, key=cv2.contourArea)
        x, y, w, h = cv2.boundingRect(c)
        center = np.array([[np.float32(x + w/2)], [np.float32(y + h/2)]])

        # Correct Kalman prediction with actual measurement
        kalman.correct(center)

    # Predict next position
    prediction = kalman.predict()
    pred_x, pred_y = int(prediction[0]), int(prediction[1])

    # Show prediction as green circle
    cv2.circle(frame, (pred_x, pred_y), 5, (0, 255, 0), -1)

    # Display the video frame
    cv2.imshow("Kalman Tracking", frame)
    if cv2.waitKey(30) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
